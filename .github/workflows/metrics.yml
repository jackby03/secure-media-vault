name: 📊 Project Metrics
on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

jobs:
  generate-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate project metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get issues data
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              state: 'all',
              per_page: 100
            });
            
            // Get pull requests data
            const prs = await github.paginate(github.rest.pulls.list, {
              owner,
              repo,
              state: 'all',
              per_page: 100
            });
            
            // Calculate metrics
            const openIssues = issues.filter(issue => issue.state === 'open' && !issue.pull_request).length;
            const closedIssues = issues.filter(issue => issue.state === 'closed' && !issue.pull_request).length;
            const openPRs = prs.filter(pr => pr.state === 'open').length;
            const closedPRs = prs.filter(pr => pr.state === 'closed').length;
            
            // Issues by label
            const bugIssues = issues.filter(issue => issue.labels.some(label => label.name === 'bug')).length;
            const enhancementIssues = issues.filter(issue => issue.labels.some(label => label.name === 'enhancement')).length;
            const securityIssues = issues.filter(issue => issue.labels.some(label => label.name === 'security')).length;
            
            // Calculate response times (simplified)
            const thisWeek = new Date();
            thisWeek.setDate(thisWeek.getDate() - 7);
            
            const recentIssues = issues.filter(issue => new Date(issue.created_at) > thisWeek);
            const respondedIssues = recentIssues.filter(issue => issue.comments > 0);
            const responseRate = recentIssues.length > 0 ? (respondedIssues.length / recentIssues.length * 100).toFixed(1) : 0;
            
            // Create metrics report
            const metricsReport = `
            # 📊 Weekly Project Metrics Report
            
            Generated on: ${new Date().toISOString().split('T')[0]}
            
            ## 📈 Issue Statistics
            - **Open Issues**: ${openIssues}
            - **Closed Issues**: ${closedIssues}
            - **Total Issues**: ${openIssues + closedIssues}
            
            ### Issues by Type
            - 🐛 **Bugs**: ${bugIssues}
            - ✨ **Enhancements**: ${enhancementIssues}
            - 🔒 **Security**: ${securityIssues}
            
            ## 🔄 Pull Request Statistics
            - **Open PRs**: ${openPRs}
            - **Closed PRs**: ${closedPRs}
            - **Total PRs**: ${openPRs + closedPRs}
            
            ## 📞 Response Metrics
            - **Issues created this week**: ${recentIssues.length}
            - **Response rate**: ${responseRate}%
            
            ## 🎯 Health Indicators
            - **Issue closure rate**: ${closedIssues > 0 ? ((closedIssues / (openIssues + closedIssues)) * 100).toFixed(1) : 0}%
            - **PR closure rate**: ${closedPRs > 0 ? ((closedPRs / (openPRs + closedPRs)) * 100).toFixed(1) : 0}%
            `;
            
            console.log(metricsReport);
            
            // Create or update metrics issue
            try {
              const existingIssues = await github.rest.issues.listForRepo({
                owner,
                repo,
                labels: 'metrics',
                state: 'open'
              });
              
              if (existingIssues.data.length > 0) {
                // Update existing metrics issue
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: existingIssues.data[0].number,
                  body: metricsReport
                });
              } else {
                // Create new metrics issue
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: `📊 Weekly Metrics - ${new Date().toISOString().split('T')[0]}`,
                  body: metricsReport,
                  labels: ['metrics', 'automated']
                });
              }
            } catch (error) {
              console.error('Error creating/updating metrics issue:', error);
            }
