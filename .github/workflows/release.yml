name: 🏷️ Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_created: ${{ steps.release.outputs.release_created }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Release Please
      uses: google-github-actions/release-please-action@v4
      id: release
      with:
        release-type: simple
        package-name: secure-media-vault
        include-component-in-tag: false
        bump-minor-pre-major: true
        bump-patch-for-minor-pre-major: true

    - name: 🏷️ Get Version
      id: version
      if: steps.release.outputs.release_created
      run: |
        echo "version=${{ steps.release.outputs.tag_name }}" >> $GITHUB_OUTPUT

    - name: ☕ Set up JDK 21
      if: steps.release.outputs.release_created
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 🏗️ Build Release Artifacts
      if: steps.release.outputs.release_created
      working-directory: ./api
      run: |
        chmod +x gradlew
        ./gradlew clean build -x test
        ./gradlew bootJar

    - name: 📝 Generate Changelog
      if: steps.release.outputs.release_created
      id: changelog
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          changelog=$(awk "/^## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: 📦 Create Release Assets
      if: steps.release.outputs.release_created
      run: |
        mkdir -p release-assets
        cp api/build/libs/*.jar release-assets/
        cp docker-compose.yml release-assets/
        cp -r grafana release-assets/
        cp prometheus.yml release-assets/
        
        # Create deployment scripts
        cat > release-assets/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "🚀 Deploying Secure Media Vault ${{ steps.version.outputs.version }}"
        docker-compose pull
        docker-compose up -d
        echo "✅ Deployment complete"
        EOF
        chmod +x release-assets/deploy.sh
        
        # Create archive
        tar -czf secure-media-vault-${{ steps.version.outputs.version }}.tar.gz -C release-assets .

    - name: 📤 Upload Release Assets
      if: steps.release.outputs.release_created
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./secure-media-vault-${{ steps.version.outputs.version }}.tar.gz
        asset_name: secure-media-vault-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: 📄 Upload JAR
      if: steps.release.outputs.release_created
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./api/build/libs/secure-media-vault-${{ steps.version.outputs.version }}.jar
        asset_name: secure-media-vault-${{ steps.version.outputs.version }}.jar
        asset_content_type: application/java-archive

  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.release_created == 'true'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 🏗️ Build Application
      working-directory: ./api
      run: |
        chmod +x gradlew
        ./gradlew clean build -x test

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./api/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    if: needs.create-release.outputs.release_created == 'true'
    
    steps:
    - name: 🎉 Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 **New Release Published!**
          
          **Version:** ${{ needs.create-release.outputs.version }}
          **Repository:** ${{ github.repository }}
          **Release Notes:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
          
          🐳 Docker images are available:
          - `ghcr.io/${{ github.repository }}:latest`
          - `ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}`
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📧 Notify Teams
      uses: jdcargile/ms-teams-notification@v1.4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
        notification-summary: "🎉 New Release: ${{ needs.create-release.outputs.version }}"
        notification-color: 28a745
        timezone: UTC
