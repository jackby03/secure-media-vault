name: üöÄ Deploy

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-'))
    environment:
      name: staging
      url: https://staging-secure-media-vault.example.com
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: üìù Create deployment manifest
      run: |
        envsubst < k8s/staging/deployment.yaml > deployment-staging.yaml
      env:
        IMAGE_TAG: ${{ steps.version.outputs.version || 'latest' }}
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
        RABBITMQ_URL: ${{ secrets.STAGING_RABBITMQ_URL }}
        MINIO_URL: ${{ secrets.STAGING_MINIO_URL }}

    - name: üöÄ Deploy to EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        kubectl apply -f deployment-staging.yaml
        kubectl rollout status deployment/secure-media-vault-staging -n staging
        kubectl get services -n staging

    - name: üîç Health Check
      run: |
        STAGING_URL="${{ secrets.STAGING_URL }}"
        for i in {1..30}; do
          if curl -f $STAGING_URL/actuator/health; then
            echo "‚úÖ Staging deployment healthy"
            exit 0
          fi
          echo "Waiting for deployment to be ready... ($i/30)"
          sleep 10
        done
        echo "‚ùå Staging deployment failed health check"
        exit 1

    - name: üß™ Run Smoke Tests
      run: |
        chmod +x ./scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh ${{ secrets.STAGING_URL }}

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-'))
    environment:
      name: production
      url: https://secure-media-vault.example.com
    needs: [deploy-staging]
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: üìù Create deployment manifest
      run: |
        envsubst < k8s/production/deployment.yaml > deployment-production.yaml
      env:
        IMAGE_TAG: ${{ steps.version.outputs.version }}
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
        RABBITMQ_URL: ${{ secrets.PRODUCTION_RABBITMQ_URL }}
        MINIO_URL: ${{ secrets.PRODUCTION_MINIO_URL }}

    - name: üöÄ Deploy to EKS with Blue-Green strategy
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        
        # Deploy to green environment
        kubectl apply -f deployment-production.yaml
        kubectl rollout status deployment/secure-media-vault-green -n production
        
        # Health check green environment
        kubectl port-forward service/secure-media-vault-green 8080:8080 -n production &
        sleep 10
        
        if curl -f http://localhost:8080/actuator/health; then
          echo "‚úÖ Green deployment healthy, switching traffic"
          kubectl patch service secure-media-vault-production -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl delete deployment secure-media-vault-blue -n production --ignore-not-found=true
          kubectl get services -n production
        else
          echo "‚ùå Green deployment failed health check, rolling back"
          kubectl delete deployment secure-media-vault-green -n production
          exit 1
        fi

    - name: üîç Production Health Check
      run: |
        PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
        for i in {1..30}; do
          if curl -f $PRODUCTION_URL/actuator/health; then
            echo "‚úÖ Production deployment healthy"
            exit 0
          fi
          echo "Waiting for deployment to be ready... ($i/30)"
          sleep 10
        done
        echo "‚ùå Production deployment failed health check"
        exit 1

    - name: üß™ Run Production Smoke Tests
      run: |
        chmod +x ./scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh ${{ secrets.PRODUCTION_URL }}

    - name: üìä Update Monitoring
      run: |
        # Update monitoring dashboards and alerts
        echo "Updating production monitoring for version ${{ steps.version.outputs.version }}"

    - name: üéâ Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üéâ Production deployment successful! Version ${{ steps.version.outputs.version }} is now live."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: üö® Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "üö® Production deployment failed! Version ${{ steps.version.outputs.version }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
